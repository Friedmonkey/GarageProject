@page "/ApproveAppointments"
@using Microsoft.EntityFrameworkCore
@using MudBlazor.Extensions;
@using System.Security.Claims;
@using DatabaseLibrary.Database.Appointments;

@inject IUserRepository userRepository;
@inject IAppointmentRepository appointmentRepository;
@inject AuthenticationStateProvider authProvider;
@inject ISnackbar snackBar;
@inject IDialogService DialogService;

@implements IDisposable;

<MudExtensions.MudLoading Loading="!loaded || isBusy" Overlap="true" Text="Loading...">
    @if (Appointments.Count() == 0)
    {
        <MudText Typo="Typo.h2">No appointments yet!</MudText>
    }
    <div class="d-flex flex-row gap-2">
        @foreach (var appointment in Appointments)
        {
            <MudCard Elevation="3">
                <MudCardHeader>
                    <MudText>Appointment for @appointment.AppointmentCreator.FullName</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@appointment.PlannedDate.ToLongDateString()</MudText>
                    <MudTextField ReadOnly="true" Lines="2" AutoGrow="true" Value="@appointment.Description" Label="Description" />
                    <MudSelect T="UserAccount" Label="Assign Mechanic" @bind-Value="appointment.MechanicAssigned">
                        <MudSelectItem Value="(UserAccount?)null">None</MudSelectItem>
                        @foreach (var mechanic in Mechanics)
                        {
                            var appointments = MechanicAppointments[mechanic.ID];
                            //mechanic already has a date planned continue
                            bool isBusyOnThatDate = (appointments.Any(a => a.PlannedDate == appointment.PlannedDate));

                            <MudSelectItem Disabled="isBusyOnThatDate" Value="@mechanic">@mechanic.FullName</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <div class="d-flex gap-1">
                        <MudButton Disabled="@isBusy" Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => ApproveAppointment(appointment))">Approve</MudButton>
                        <MudButton Disabled="@isBusy" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => RejectAppointment(appointment))">Reject</MudButton>
                        <MudButton Disabled="@isBusy" Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteAppointment(appointment))">Delete</MudButton>
                    </div>
                </MudCardActions>
            </MudCard>
        }
    </div>
</MudExtensions.MudLoading>    

@code {
    private List<Appointment> Appointments = new List<Appointment>();
    private List<UserAccount> Mechanics = new List<UserAccount>();
    private Dictionary<int, List<Appointment>> MechanicAppointments = new Dictionary<int, List<Appointment>>();

    public UserAccount Profile { get; set; } = null;
    private bool loaded;
    private bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var claims = authState.User.Claims;
        if (claims != null && claims.Count() > 0 && !loaded)
        {
            var sidClaim = claims.FirstOrDefault(c => c.Type == ClaimTypes.Sid);
            int? userId = ParsingExtention.IntTryParse(sidClaim.Value);
            if (userId != null)
            {
                Profile = (await userRepository.GetUsersByFilter(id: (int)userId)).FirstOrDefault();
                if (Profile != null && (Profile.Role is UserAccount.Admin or UserAccount.Secretary))
                {
                    await LoadAppointments();
                    await LoadMechanics();
                    loaded = true;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task LoadAppointments()
    {
        Appointments = (await appointmentRepository.GetAppointmentsByFilter(status: Status.Requested)).OrderBy(a => a.CreationDate).ToList();
    }

    public void Dispose()
    {
        loaded = false;
    }

    private async Task LoadMechanics()
    {
        Mechanics = await userRepository.GetUsersByFilter(role: UserAccount.Mechanic);
        MechanicAppointments.Clear();
        foreach (var mechanic in Mechanics)
        {
            MechanicAppointments.Add(mechanic.ID, await appointmentRepository.GetAppointmentsByFilter(mechanicId: mechanic.ID));
        } 
    }

    private async Task ApproveAppointment(Appointment appointment)
    {
        if (appointment.MechanicAssigned == null)
        {
            snackBar.Add("Please assign a mechanic to the appointment before approving!", Severity.Warning);
            return;
        }

        // Here you would update the appointment in the database with the assigned mechanic
        isBusy = true;
        await appointmentRepository.UpdateAppointment(appointment.ID, status:Status.Aproved, mechanicId: appointment.MechanicAssigned.ID);
        await LoadAppointments(); // Reload appointments after update
        await LoadMechanics(); // Reload appointments after update
        isBusy = false;
        snackBar.Add("Appointment approved and mechanic assigned successfully!", Severity.Success);
    }


    private async Task RejectAppointment(Appointment appointment)
    {
        // Here you would reject the appointment
        // You can mark the appointment as rejected in the database or delete it, depending on your requirements
        // For simplicity, let's mark it as rejected in this example
        appointment.Status = Status.Rejected;
        isBusy = true;
        await appointmentRepository.UpdateAppointment(appointment.ID, status: Status.Rejected);
        await LoadAppointments(); // Reload appointments after update
        isBusy = false;
        snackBar.Add("Appointment rejected successfully!", Severity.Success);
    }


    private async Task DeleteAppointment(Appointment appointment)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete appointment",
            "Are you sure you want to delete this appointment, it will be GONE FOREVER!",
            yesText: "Delete appointment!", cancelText: "Cancel");

        if (result != null && result == true)
        {
            isBusy = true;
            //deletes the tournament
            await appointmentRepository.DeleteAppointment(appointment.ID);
            await LoadAppointments(); // Reload appointments after update
            isBusy = false;
            snackBar.Add("Appointment has been deleted.", Severity.Warning);
        }
    }
}
