@page "/";
@using DatabaseLibrary.Database.Reviews;

@inject NavigationManager navManager;
@inject ISnackbar snackBar;
@inject IUserRepository userRepository;
@inject IReviewRepository reviewRepository;
@inject RemoteService remoteService;



<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h3" GutterBottom="true">Hello, @context.User.Identity.Name!</MudText>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h3" GutterBottom="true">Hello, Guest</MudText>
    </NotAuthorized>
</AuthorizeView>

<MudText Class="mb-8">Welcome to <b>The Garage</b>, <b>The Garage</b> is the garage for reparing your vehicles!</MudText>
<AuthorizeView>
    <Authorized>
        <MudText>Let other customers know what you think of us!</MudText>
        @if (AlreadyReviewed)
        {
            <MudText>Thank you for leaving behind a review!</MudText>
        }
        else
        {
            <MudText>We would gladly aprachiate if you left a review!</MudText>
            <ReviewCard Writing="true"/>
        }
    </Authorized>
</AuthorizeView>
@if (Reviews.Count() > 0)
{
    <MudText Class="mb-8">See what other customers think:</MudText>
    <br/>
    <MudExpansionPanel Text="Reviews">
        @foreach (var review in Reviews)
        {
            <ReviewCard Review="review" />
        }
    </MudExpansionPanel>
}

@code{
    [CascadingParameter(Name = "AuthUser")]
    public UserAccount User { get; set; }

    private bool AlreadyReviewed;

    public List<Review> Reviews = new List<Review>();

    protected override async Task OnInitializedAsync()
    {
        remoteService.RefreshRequested += reload;
        await LoadReviews();
    }

    private async Task LoadReviews()
    {
        List<Review> reviews = await reviewRepository.GetReviewsByFilter();
        Reviews = reviews.OrderBy(r => r.DatePosted).OrderBy(r => r.ReviewStars).ToList();

        int userId = (User == null) ? -1 : User.ID;
        var userReview = Reviews.FirstOrDefault(r => r.Reviewer.ID == userId);

        if (userReview != null)
        {
            AlreadyReviewed = true;
            Reviews.Remove(userReview);
            Reviews.Add(userReview);
        }

        Reviews.Reverse();
    }

    public void Dispose()
    {
        remoteService.RefreshRequested -= reload;
    }

    private async void reload()
    {
        try
        {
            await LoadReviews();
            await InvokeAsync(StateHasChanged);
        }
        catch { }
    }
}