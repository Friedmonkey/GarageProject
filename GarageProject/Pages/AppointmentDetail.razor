@page "/appointment/detail/{IdStr}";
@inject IWebHostEnvironment WebHostEnvironment;
@inject IAppointmentRepository appointmentRepository;
@inject IMaterialRepository materialRepository;
@inject IServiceActionRepository serviceActionRepository;
@inject IInvoiceRepository invoiceRepository;
@inject ISnackbar snackBar;
@inject IDialogService dialogService;
@inject NavigationManager navManager;



@using System.Text;
@using DatabaseLibrary.Database.Materials;
@using DatabaseLibrary.Database.Appointments;
@using DatabaseLibrary.Database.ServiceActions;
@using DatabaseLibrary.Database.Invoices;


<PageTitle>Appointment Detail</PageTitle>
@if(appointment == null)
{
    <Auth />
}
else
{
    <AuthorizeView Roles="@($"{UserAccount.Admin},{UserAccount.Secretary}{UserAccount.Mechanic}")">
        <Authorized>
            <div Class="gap-4 d-flex flex-wrap">
                <MudText Class="w100">Appointment Detail</MudText>
                    @if(materials != null)
                    {
                    <MudSelect T="Material" @bind-Value="@material" Class="w50" Text="Material" Label="Material" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in materials)
                            {
                                <MudSelectItem Value="@item">
                                    <p>@item.Name</p>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    <MudButton OnClick="() => AddMaterialToInvoice(material,AmountOfMaterials)">+</MudButton>
                    }
                    @if (serviceActions != null)
                    {
                    <MudSelect T="ServiceAction" @bind-Value="@serviceAction" Class="w50" Text="Service Action" Label="Service Action" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in serviceActions)
                            {
                                <MudSelectItem Value="@item">
                                    <p>@item.Name </p>
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton OnClick="() => AddServiceActionToInvoice(serviceAction, AmountOfServiceAction)">+</MudButton>
                    }
            </div>
            <div Class="gap-2 d-flex flex-wrap">

                @if (invoiceServiceActionsToAdd != null)
                {
                    <MudPaper Class="w40">
                        <MudText>List of ServiceAction</MudText>
                        <MudTable Items="@invoiceServiceActionsToAdd" @bind-SelectedItem="@selectedItem2" Hover="true" Dense="true" Striped="true" Bordered="true" Class="mb-6">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Price per hour</MudTh>
                                <MudTh>Amount of Hours</MudTh>
                                <MudTh>Delete</MudTh>
                            </HeaderContent>
                                <RowTemplate Context="ServiceAction">
                                <MudTd>@ServiceAction.ServiceAction.Name</MudTd>
                                    <MudTd>@ServiceAction.ServiceAction.HourPrice</MudTd>
                                <MudTd>@AmountOfMaterials</MudTd>
                                    <MudIcon Class="ma-4" Icon="@Icons.Outlined.Delete" @onclick="@( async() => await RemoveItem(ServiceAction,ServiceAction.GetType()))" Size="Size.Small"></MudIcon>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                }
            </div>
            <div>
                @if (invoice.ServiceActions != null && invoice.Materials != null)
                {
                    <MudButton @*OnClick="() => SendInvoice()"*@> Send Invoice</MudButton>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <Auth />
        </NotAuthorized>
    </AuthorizeView>
}

    

@code {
    [Parameter]
    public string IdStr { get; set; }
    public int? Id => ParsingExtention.IntTryParse(IdStr);

    [CascadingParameter(Name = "AuthUser")]
    public UserAccount? User { get; set; }

    private Appointment appointment = new Appointment();

    private List<Material> materials = new List<Material>();

    private Material material = new Material();
    private InvoiceMaterial selectedItem1 = new InvoiceMaterial();

    private InvoiceServiceAction selectedItem2 = new InvoiceServiceAction();
    private ServiceAction serviceAction = new ServiceAction();
    private List<ServiceAction> serviceActions= new List<ServiceAction>();
    private List<InvoiceServiceAction> invoiceServiceActionsToAdd = new List<InvoiceServiceAction>();
    private List<InvoiceMaterial> invoiceMaterialsToAdd = new List<InvoiceMaterial>();

    private Invoice invoice = new Invoice();


    private float AmountOfMaterials;
    private float AmountOfServiceAction;

    protected override async Task OnInitializedAsync()
    {
        appointment = (await appointmentRepository.GetAppointmentsByFilter(id:Id)).ToList().FirstOrDefault();
        materials = (await materialRepository.GetMaterialsByFilter()).ToList();
        serviceActions = (await serviceActionRepository.GetServiceActionsByFilter()).ToList();
        invoice = (await invoiceRepository.GetInvoiceByFilter(appointment.Invoice.ID));
    }

    private void AddMaterialToInvoice(Material m, float amount)
    {
        InvoiceMaterial tempIM = new InvoiceMaterial();
        if (material != null && amount != null)
        {
            bool contains = true;
            foreach (var item in invoiceMaterialsToAdd)
            {
                if (item.Material != m)
                {
                    tempIM = new InvoiceMaterial()
                        {
                            Material = m,
                            Amount = amount
                        };
                }
                else
                {
                    tempIM = null;
                }

            }
            if (!contains && tempIM != null)
            {
                invoiceMaterialsToAdd.Add(tempIM);
                materials.Remove(tempIM.Material);
                material = new Material();
                StateHasChanged();
            }
        }
    }
    private void AddServiceActionToInvoice(ServiceAction s, float AmoutOfHours)
    {
        InvoiceServiceAction tempIM = new InvoiceServiceAction();
        if (serviceAction != null && AmoutOfHours != null)
        {
            bool contains = true;
            foreach (var item in invoiceServiceActionsToAdd)
            {
                if (item.ServiceAction != s)
                {
                    tempIM = new InvoiceServiceAction()
                        {
                            ServiceAction = s,
                            Hours = AmoutOfHours
                        };
                }
                else
                {
                    tempIM = null;
                }

            }
            if (!contains && tempIM != null)
            {
                invoiceServiceActionsToAdd.Add(tempIM);
                serviceActions.Remove(tempIM.ServiceAction);
                serviceAction = new ServiceAction();
                StateHasChanged();
            }
        }

    }

    private async Task RemoveItem(object Obj, Type type)
    {
        await Task.Delay(0);

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this record? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = dialogService.Show<DeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (typeof(Material) == type)
            {
                invoiceMaterialsToAdd.Remove((InvoiceMaterial)Obj);
                materials.Add(((InvoiceMaterial)Obj).Material);
            }
            else if (typeof(ServiceAction) == type)
            {
                invoiceServiceActionsToAdd.Remove((InvoiceServiceAction)Obj);
                serviceActions.Add((ServiceAction)Obj);
            }
            StateHasChanged();
        }


    }
    private void SendInvoice()
    {
        if (invoiceMaterialsToAdd.Count() < 0 && invoiceMaterialsToAdd != null && invoiceServiceActionsToAdd.Count() < 0 && invoiceServiceActionsToAdd != null)
        {
            invoice.ServiceActions = invoiceServiceActionsToAdd;
            invoice.Materials = invoiceMaterialsToAdd;
        }
        if(invoice != null)
        {
            invoiceRepository.UpdateInvoice(invoice.ID, invoice.Customer.ID, invoice.Date);
        }
    }
    
    
}
