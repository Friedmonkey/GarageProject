@page "/appointment/detail/{IdStr}";
@inject IWebHostEnvironment WebHostEnvironment;
@inject IAppointmentRepository appointmentRepository;
@inject IMaterialRepository materialRepository;
@inject IServiceActionRepository serviceActionRepository;
@inject IInvoiceRepository invoiceRepository;
@inject IInvoiceCoupleRepository invoiceCoupleRepository;
@inject ISnackbar snackBar;
@inject IDialogService dialogService;
@inject NavigationManager navManager;



@using System.Text;
@using DatabaseLibrary.Database.Materials;
@using DatabaseLibrary.Database.Appointments;
@using DatabaseLibrary.Database.ServiceActions;
@using DatabaseLibrary.Database.Invoices;
@using DatabaseLibrary.Database.InvoiceCouples;

<PageTitle>Appointment Detail</PageTitle>
<MudText Class="w100">Appointment Detail</MudText>

@if(Appointment == null || !Loaded)
{
    <Auth />
}
else if (isBusy)
{
    <p>Getting the latest data for you, please wait</p>
}
else
{
        <AuthorizeView Context="AuthContext" Roles="@($"{UserAccount.Admin},{UserAccount.Secretary},{UserAccount.Mechanic}")">
            <Authorized>
                <div class="d-flex flex-row justify-center w100">
                    <div class="d-flex flex-column gap-5 w100 justify-center">
                        @if(Materials != null)
                        {
                            <div class="d-flex flex-column w100">
                                <MudSelect T="Material" @bind-Value="@SelectedMaterial" Class="w50" Text="Material" Label="Material" AnchorOrigin="Origin.BottomCenter">
                                    @foreach (var item in Materials)
                                    {
                                        <MudSelectItem Value="@item">
                                            <p>@item.Name</p>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                                <MudNumericField @bind-Value="AmountOfMaterials" />
                                <MudButton Class="ma-2" Color="Color.Success" Variant="Variant.Filled" OnClick="() => AddMaterialToInvoice(SelectedMaterial,AmountOfMaterials)">+</MudButton>
                            </div>
                        }
                        <MudPaper Class="w100">
                            <MudText>List of Materials</MudText>
                            <MudTable Items="@Appointment.Invoice.Materials" Hover="false" Striped="true" Bordered="true" Class="mb-6">
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Price per material</MudTh>
                                    <MudTh>Amount</MudTh>
                                    <MudTh>Delete</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Name</MudTd>
                                    <MudTd>@context.Cost</MudTd>
                                    <MudTd>@context.Amount</MudTd>
                                    <MudIcon Icon="@Icons.Material.Outlined.Delete" @onclick="@( async() => await RemoveItem(context))" Color="Color.Error" Size="Size.Small" Class="ma-4" />
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </div>
                    <div class="d-flex flex-column gap-5 w100 justify-center">
                        @if (ServiceActions != null)
                        {   
                            <div class="d-flex flex-column w100">
                                <MudSelect T="ServiceAction" @bind-Value="@SelectedServiceAction" Class="w50" Text="Service Action" Label="Service Action" AnchorOrigin="Origin.BottomCenter">
                                    @foreach (var item in ServiceActions)
                                    {
                                        <MudSelectItem Value="@item">
                                            <p>@item.Name </p>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                                <MudNumericField @bind-Value="AmountOfServiceAction" />
                                <MudButton Class="ma-2" Color="Color.Success" Variant="Variant.Filled" OnClick="() => AddServiceActionToInvoice(SelectedServiceAction, AmountOfServiceAction)">+</MudButton>
                            </div>
                        }
                        <MudPaper Class="w100">
                            <MudText>List of ServiceAction</MudText>
                            <MudTable Items="@Appointment.Invoice.ServiceActions" Hover="false" Striped="true" Bordered="true" Class="mb-6">
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Price per hour</MudTh>
                                    <MudTh>Amount of Hours</MudTh>
                                    <MudTh>Delete</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Name</MudTd>
                                    <MudTd>@context.Cost</MudTd>
                                    <MudTd>@context.Hours</MudTd>
                                    <MudIcon Icon="@Icons.Material.Outlined.Delete" @onclick="@( async() => await RemoveItem(context))" Color="Color.Error" Size="Size.Small" Class="ma-4" />
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </div>
                </div>
                <div>
                    @if (Appointment?.Invoice?.ServiceActions != null && Appointment?.Invoice?.Materials != null)
                    {
                        <MudButton> Send Invoice</MudButton>
                    } 
                </div>
        </Authorized>
        <NotAuthorized>
            <Auth />
        </NotAuthorized>
    </AuthorizeView>
}

    

@code {
    [Parameter]
    public string IdStr { get; set; }
    public int? Id => ParsingExtention.IntTryParse(IdStr);

    [CascadingParameter(Name = "AuthUser")]
    public UserAccount? User { get; set; }

    private bool Loaded = false;
    private bool isBusy = false;


    // these get resolved on start
    public Appointment Appointment = new Appointment();
    public List<Material> Materials = new List<Material>();
    public List<ServiceAction> ServiceActions = new List<ServiceAction>();




    // private InvoiceMaterial selectedItem1 = new InvoiceMaterial();

    // private InvoiceServiceAction selectedItem2 = new InvoiceServiceAction();
    // private List<InvoiceServiceAction> invoiceServiceActionsToAdd = new List<InvoiceServiceAction>();
    // private List<InvoiceMaterial> invoiceMaterialsToAdd = new List<InvoiceMaterial>();

    //for the binding of fields
    private Material SelectedMaterial = new Material();
    private ServiceAction SelectedServiceAction = new ServiceAction();
    private float AmountOfMaterials;
    private float AmountOfServiceAction;

    protected override async Task OnInitializedAsync()
    {
        Loaded = false;
        Appointment = (await appointmentRepository.GetAppointmentsByFilter(id:Id)).ToList().FirstOrDefault();
        Materials = (await materialRepository.GetMaterialsByFilter()).ToList();
        ServiceActions = (await serviceActionRepository.GetServiceActionsByFilter()).ToList();
        Loaded = true;
        StateHasChanged();
        //invoice = (await invoiceRepository.GetInvoiceByFilter(appointment.Invoice.ID));
    }

    private async Task LoadData()
    {
        isBusy = true;
        StateHasChanged();
        Appointment = (await appointmentRepository.GetAppointmentsByFilter(id: Id)).ToList().FirstOrDefault();
        isBusy = false;
        StateHasChanged();
    }

    private async Task AddMaterialToInvoice(Material material, float amount)
    {
        if (material == null)
        {
            throw new ArgumentNullException("Material was null");
        }
        await invoiceCoupleRepository.CreateInvoiceMaterialCouple(Appointment.Invoice.ID, material.ID, amount);
        //     Appointment.Invoice.Materials.Add(new InvoiceMaterial()
        //         {
        //             ServiceAction = serviceAction,
        //             Hours = AmoutOfHours,
        //         }
        // );
        await LoadData();


        // bool contains = true;
        // foreach (var item in invoiceMaterialsToAdd)
        // {
        //     if (item.Material != material)
        //     {
        //         tempIM = new InvoiceMaterial()
        //             {
        //                 Material = material,
        //                 Amount = amount
        //             };
        //     }
        //     else
        //     {
        //         tempIM = null;
        //     }

        // }
        // if (!contains && tempIM != null)
        // {
        //     invoiceMaterialsToAdd.Add(tempIM);
        //     Materials.Remove(tempIM.Material);
        //     SelectedMaterial = new Material();
        //     StateHasChanged();
        // }
    }
    private async void AddServiceActionToInvoice(ServiceAction serviceAction, float AmoutOfHours)
    {
        if (serviceAction == null)
        {
            throw new ArgumentNullException("ServiceAction was null");
        }
        await invoiceCoupleRepository.CreateInvoiceServiceActionCouple(Appointment.Invoice.ID, serviceAction.ID, AmoutOfHours);
        // Appointment.Invoice.ServiceActions.Add(new InvoiceServiceAction() {
        //         ServiceAction = serviceAction,
        //         Hours = AmoutOfHours,
        //     }
        // );
        await LoadData();
        // InvoiceServiceAction tempIM = new InvoiceServiceAction();
        // if (SelectedServiceAction != null && AmoutOfHours != null)
        // {
        //     bool contains = true;
        //     foreach (var item in invoiceServiceActionsToAdd)
        //     {
        //         if (item.ServiceAction != serviceAction)
        //         {
        //             tempIM = new InvoiceServiceAction()
        //                 {
        //                     ServiceAction = serviceAction,
        //                     Hours = AmoutOfHours
        //                 };
        //         }
        //         else
        //         {
        //             tempIM = null;
        //         }

        //     }
        //     if (!contains && tempIM != null)
        //     {
        //         invoiceServiceActionsToAdd.Add(tempIM);
        //         ServiceActions.Remove(tempIM.ServiceAction);
        //         SelectedServiceAction = new ServiceAction();
        //         StateHasChanged();
        //     }
        // }

    }

    private async Task RemoveItem(IInvoiceAssigned invoiceAssigned)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete \"{invoiceAssigned.Name}\"? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = dialogService.Show<DeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await invoiceCoupleRepository.DeleteInvoiceMaterialCouple(invoiceAssigned.ID);
            LoadData();
        }


    }
    private void SendInvoice()
    {
        // if (invoiceMaterialsToAdd.Count() < 0 && invoiceMaterialsToAdd != null && invoiceServiceActionsToAdd.Count() < 0 && invoiceServiceActionsToAdd != null)
        // {
        //     invoice.ServiceActions = invoiceServiceActionsToAdd;
        //     invoice.Materials = invoiceMaterialsToAdd;
        // }
        // if(invoice != null)
        // {
        //     invoiceRepository.UpdateInvoice(invoice.ID, invoice.Customer.ID, invoice.Date);
        // }
    }
    
    
}
