@page "/appointment/detail/{IdStr}";
@inject IWebHostEnvironment WebHostEnvironment;
@inject IAppointmentRepository appointmentRepository;
@inject IMaterialRepository materialRepository;
@inject IServiceActionRepository serviceActionRepository;
@inject IInvoiceRepository invoiceRepository;
@inject ISnackbar snackBar;
@inject IDialogService dialogService;
@inject NavigationManager navManager;



@using System.Text;
@using DatabaseLibrary.Database.Materials;
@using DatabaseLibrary.Database.Appointments;
@using DatabaseLibrary.Database.ServiceActions;
@using DatabaseLibrary.Database.Invoices;


<PageTitle>Appointment Detail</PageTitle>
@if(Appointment == null)
{
    <Auth />
}
else
{
    <AuthorizeView Roles="@($"{UserAccount.Admin} {UserAccount.Secretary} {UserAccount.Mechanic}")">
        <Authorized>
            <div Class="gap-4 d-flex flex-wrap">
                <MudText Class="w100">Appointment Detail</MudText>
                    @if(Materials != null)
                    {
                        <MudSelect T="Material" @bind-Value="@SelectedMaterial" Class="w50" Text="Material" Label="Material" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in Materials)
                            {
                                <MudSelectItem Value="@item">
                                    <p>@item.Name</p>
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton OnClick="() => AddMaterialToInvoice(SelectedMaterial,AmountOfMaterials)">+</MudButton>
                    }
                    @if (ServiceActions != null)
                    {
                        <MudSelect T="ServiceAction" @bind-Value="@SelectedServiceAction" Class="w50" Text="Service Action" Label="Service Action" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in ServiceActions)
                            {
                                <MudSelectItem Value="@item">
                                    <p>@item.Name </p>
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton OnClick="() => AddServiceActionToInvoice(SelectedServiceAction, AmountOfServiceAction)">+</MudButton>
                    }
            </div>
            <div Class="gap-2 d-flex flex-wrap">
                <MudPaper Class="w40">
                    <MudText>List of ServiceAction</MudText>
                    <MudTable Items="@Appointment.Invoice.ServiceActions" Hover="false" Dense="true" Striped="true" Bordered="true" Class="mb-6">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Price per hour</MudTh>
                            <MudTh>Amount of Hours</MudTh>
                            <MudTh>Delete</MudTh>
                        </HeaderContent>
                            <RowTemplate Context="serviceAction">
                            <MudTd>@serviceAction.ServiceAction.Name</MudTd>
                            <MudTd>@serviceAction.ServiceAction.HourPrice</MudTd>
                            <MudTd>@AmountOfMaterials</MudTd>
                            <MudIcon Icon="@Icons.Material.Outlined.Delete" @onclick="@( async() => await RemoveItem(serviceAction))" Color="Color.Error" Size="Size.Small" Class="ma-4" />
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </div>
            <div>
                @if (Appointment.Invoice.ServiceActions != null && Appointment.Invoice.Materials != null)
                {
                    <MudButton @*OnClick="() => SendInvoice()"*@> Send Invoice</MudButton>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <Auth />
        </NotAuthorized>
    </AuthorizeView>
}

    

@code {
    [Parameter]
    public string IdStr { get; set; }
    public int? Id => ParsingExtention.IntTryParse(IdStr);

    [CascadingParameter(Name = "AuthUser")]
    public UserAccount? User { get; set; }


    // these get resolved on start
    public Appointment Appointment = new Appointment();
    public List<Material> Materials = new List<Material>();
    public List<ServiceAction> ServiceActions = new List<ServiceAction>();




    // private InvoiceMaterial selectedItem1 = new InvoiceMaterial();

    // private InvoiceServiceAction selectedItem2 = new InvoiceServiceAction();
    // private List<InvoiceServiceAction> invoiceServiceActionsToAdd = new List<InvoiceServiceAction>();
    // private List<InvoiceMaterial> invoiceMaterialsToAdd = new List<InvoiceMaterial>();

    //for the binding of fields
    private Material SelectedMaterial = new Material();
    private ServiceAction SelectedServiceAction = new ServiceAction();
    private float AmountOfMaterials;
    private float AmountOfServiceAction;

    protected override async Task OnInitializedAsync()
    {
        Appointment = (await appointmentRepository.GetAppointmentsByFilter(id:Id)).ToList().FirstOrDefault();
        Materials = (await materialRepository.GetMaterialsByFilter()).ToList();
        ServiceActions = (await serviceActionRepository.GetServiceActionsByFilter()).ToList();
        //invoice = (await invoiceRepository.GetInvoiceByFilter(appointment.Invoice.ID));
    }

    private void AddMaterialToInvoice(Material m, float amount)
    {
        InvoiceMaterial tempIM = new InvoiceMaterial();
        if (SelectedMaterial == null)
        {
            throw new ArgumentNullException("Material m was null");
        }

        bool contains = true;
        foreach (var item in invoiceMaterialsToAdd)
        {
            if (item.Material != m)
            {
                tempIM = new InvoiceMaterial()
                    {
                        Material = m,
                        Amount = amount
                    };
            }
            else
            {
                tempIM = null;
            }

        }
        if (!contains && tempIM != null)
        {
            invoiceMaterialsToAdd.Add(tempIM);
            Materials.Remove(tempIM.Material);
            SelectedMaterial = new Material();
            StateHasChanged();
        }
    }
    private void AddServiceActionToInvoice(ServiceAction s, float AmoutOfHours)
    {
        InvoiceServiceAction tempIM = new InvoiceServiceAction();
        if (SelectedServiceAction != null && AmoutOfHours != null)
        {
            bool contains = true;
            foreach (var item in invoiceServiceActionsToAdd)
            {
                if (item.ServiceAction != s)
                {
                    tempIM = new InvoiceServiceAction()
                        {
                            ServiceAction = s,
                            Hours = AmoutOfHours
                        };
                }
                else
                {
                    tempIM = null;
                }

            }
            if (!contains && tempIM != null)
            {
                invoiceServiceActionsToAdd.Add(tempIM);
                ServiceActions.Remove(tempIM.ServiceAction);
                SelectedServiceAction = new ServiceAction();
                StateHasChanged();
            }
        }

    }

    private async Task RemoveItem(IInvoiceAssigned invoiceAssigned)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete \"{invoiceAssigned.Name}\"? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = dialogService.Show<DeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (invoiceAssigned is Material material)
            {
                #pragma warning Todo
                // TODO:    Delete the material couple from this invoice
            }
            else if (invoiceAssigned is ServiceAction serviceAction)
            {
                #pragma warning Todo
                // TODO:    Delete the service action couple from this invoice
            }
            StateHasChanged();
        }


    }
    private void SendInvoice()
    {
        if (invoiceMaterialsToAdd.Count() < 0 && invoiceMaterialsToAdd != null && invoiceServiceActionsToAdd.Count() < 0 && invoiceServiceActionsToAdd != null)
        {
            invoice.ServiceActions = invoiceServiceActionsToAdd;
            invoice.Materials = invoiceMaterialsToAdd;
        }
        if(invoice != null)
        {
            invoiceRepository.UpdateInvoice(invoice.ID, invoice.Customer.ID, invoice.Date);
        }
    }
    
    
}
