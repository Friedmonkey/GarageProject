@using DatabaseLibrary.Database.Reviews;
@inject NavigationManager navManager;
@inject IReviewRepository reviewRepository;
@inject ISnackbar snackBar;
@inject RemoteService remoteService;

<MudPaper Elevation="2" Class="pa-2">
    @if (Review == null)
    {
        <MudText Color="Color.Error">Failed to retrive review.</MudText>
    }
    else
    {
        @if (Review.Reviewer == null)
        {
            if (Writing && User != null)
            {
                Review.Reviewer = User;
            }
        }
        else
        {
            <div class="d-flex flex-row gap-2 cursor-pointer" @onclick=@(() => navManager.NavigateTo($"/profile/{Review.Reviewer.ID}"))>
                <Avatar Clickable="false" Account="Review.Reviewer"></Avatar>
                <div class="ml-8">
                    <MudText Typo="Typo.subtitle1">@Review.Reviewer.FullName</MudText>
                    <MudText Typo="Typo.caption">@@@Review.Reviewer.Username</MudText>
                </div>
            </div>
        }
        <div>
            @if (!Writing)
            {
                <MudRating ReadOnly="true" SelectedValue="Review.ReviewStars"/>
                @foreach (var line in Review.ReviewText.Split('\n'))
                {
                    <MudText>@line</MudText>  
                }
            }
            else
            {
                <div class="d-flex flex-column">
                    <MudRating @bind-SelectedValue="Review.ReviewStars" HoveredValueChanged="HandleHoveredValueChanged" />
                    <MudText Typo="Typo.subtitle2" Class="deep-purple-text mt-2">@LabelText</MudText>
                </div>
                <MudTextField AutoGrow="true" Lines="3" @bind-Value="Review.ReviewText" Label="Review"/>
                <div>
                    <MudButton OnClick="PostReview" >Post review</MudButton>
                </div>    
            }
        </div>
    }
</MudPaper>

@code {
    [Parameter]
    public Review Review { get; set; }

    [Parameter]
    public bool Writing { get; set; } = false;

    [CascadingParameter(Name = "AuthUser")]
    public UserAccount User { get; set; }

    private int? activeVal;

    private void HandleHoveredValueChanged(int? val) => activeVal = val;

    private string LabelText => (activeVal ?? Review.ReviewStars) switch
    {
        1 => "Very bad",
        2 => "Bad",
        3 => "Sufficient",
        4 => "Good",
        5 => "Awesome!",
        _ => "Rate our product!"
    };

    protected override async Task OnInitializedAsync()
    {
        if (Writing)
        {
            Review = new Review()
            {
                ReviewText = string.Empty,
                DatePosted = DateTime.Now,
            };
        }
    }

    public async Task PostReview()
    {
        if (Review.ReviewStars is 1 or 2 or 3 or 4 or 5) { } else
        {
            snackBar.Add("Please select a rating in order to post this review", Severity.Warning);
            return;
        }
        var content = Review.ReviewText.Trim();
        if (string.IsNullOrWhiteSpace(content))
        {
            snackBar.Add("Please enter the body for your review", Severity.Warning);
            return;
        }
        if (User == null)
        {
            snackBar.Add("you need to be logged in in order to write a review", Severity.Error);
            return;
        }
        Review.DatePosted = DateTime.Now; //update the datetime accurately
        Review.Reviewer = User; //update the datetime accurately
        var result = await reviewRepository.CreateReview(Review);
        if (result == "success")
        {
            snackBar.Add("Review posted!", Severity.Success);
            remoteService.CallRequestRefresh();
        }
        else
        {
            snackBar.Add(result, Severity.Error);
        }
    }
}
